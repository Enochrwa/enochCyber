ABSTRACT
In the modern digital landscape, cyber threats have become increasingly sophisticated, posing significant risks to organizations and individuals. As networks grow in complexity, traditional security measures often fall short in effectively detecting and mitigating evolving threats. This research focuses on the design and implementation of a comprehensive approach to monitor malicious activities and provide robust network protection. The proposed system integrates multiple security mechanisms, including real-time threat detection, anomaly-based monitoring, and automated incident response. By leveraging advanced machine learning algorithms and signature-based Intrusion Detection Systems (IDS), the proposed new approach ensures accurate identification of suspicious activities such as unauthorized access attempts, malware propagation, and data exfiltration. Additionally, behavioral analysis techniques are employed to detect deviations from normal network activity, allowing for proactive threat mitigation. The effectiveness of the proposed approach is evaluated through extensive simulations and real-world testing in controlled network environments. Experimental results demonstrate its capability to detect various forms of cyber threats with high accuracy while maintaining minimal false positives. Moreover, the system proves to be scalable, adaptable, and efficient in protecting networks from both known and emerging threats. In conclusion, this research presents a holistic approach to network security by combining real-time monitoring, threat intelligence, and automated mitigation strategies. The findings contribute to the advancement of cybersecurity frameworks, offering a viable solution for organizations seeking to enhance their network protection against increasingly sophisticated cyber threats.






CHAPTER I: GENERAL INTRODUCTION
1.1	INTRODUCTION
This study provides a comprehensive introduction to the study, laying the foundation for the exploration of network protection and malicious activity monitoring. It also highlights the problem statement, emphasizing the limitations of existing detection technologies and the need for advanced intrusion detection systems (IDS) that can address these shortcomings. The objectives of the study are outlined, including the design of a threat monitoring system, the integration of IDS mechanisms. also presents research questions and hypotheses to guide the study, investigating the efficacy of various detection and mitigation techniques. The significance of the study is emphasized, particularly in terms of improving cybersecurity practices, reducing response times to cyber threats. Finally, the chapter outlines the scope of the study, focusing on real-time network monitoring and intrusion detection.
1.2	Background of the study
The Internet communication technology brings great convenience to our society. At the same time, a variety of viruses and malicious codes increasingly spread on the network seriously, it brings growing threats to the network. Among the various forms of malicious software, the Trojan and spyware are most popular in internet. These malwares are always used or programmed by attackers to gain access to private computer systems or gather sensitive information. Trojan and spyware distinguish themselves from other forms of malware, by that, they have to establish a command and control channel to translate command and data. Most of the current malware detection technology runs on one machine and cannot monitor the network layer effectively. (Jiang, 2010)
So such kind of malware detection is not beneficial for detecting the whole local area network (LAN).  Some intrusion detection system (IDS)-based network malware detecting methods, such as Snort , is based on the communication ports and some other known characteristics. These methods do not identify or detect the communication behavior. Thus, these methods are sometimes ineffective with the malicious software that changes the ports dynamically and disguise themselves with protocols. They are also not effective for some unknown malicious software newly created. (Wrightson, 2012)
Modern malware detection requires a more comprehensive approach that extends beyond signature-based methods. Advanced detection techniques, such as anomaly detection and machine learning, offer the potential to identify previously unknown threats by analyzing network behavior, traffic patterns, and system activity in real-time. The integration of behavioral analysis can further enhance detection by identifying deviations from normal user or system behavior that may indicate the presence of malicious activity. (Xiang, 2015)
Additionally, there is a growing need for automated threat mitigation to address the speed and scale of cyberattacks. Manual responses to cyber incidents are often too slow and ineffective, leading to significant damage before a threat can be neutralized. By implementing automated response mechanisms, organizations can quickly isolate compromised devices, block malicious IP addresses, and contain attacks before they can spread further. (Xiang, 2015)
1.2 Problem Statement
In today's digital era, organizations face persistent cyber threats such as malware, phishing, Distributed Denial-of-Service (DDoS) attacks, and unauthorized access. Traditional security measures often fail to detect sophisticated attacks, leading to data breaches, financial losses, and reputational damage. To address these challenges, a comprehensive Network Protection and Malicious Activity Monitoring System is required to continuously monitor, detect, and respond to cyber threats in real-time. The proposed system will leverage advanced security techniques, threat intelligence, and automated response mechanisms to enhance organizational cybersecurity.
1.3 Objectives of the Study 
1.3.1 General Objective
The general objective of the study is to design and implement an approach to monitor Malicious activities and provide network protection
1.3.2 Specific Objectives
a.	To Design a Threat Monitoring System – Develop a framework for continuous monitoring of network traffic to detect malicious activities in real-time.
b.	To Implement Intrusion Detection Mechanisms – Integrate both signature-based and anomaly-based intrusion detection systems (IDS) for threat identification.
c.	To Utilize Machine Learning for Threat Analysis – Apply machine learning techniques to analyze patterns and detect previously unknown cyber threats.
d.	To Develop Automated Response Mechanisms – Implement automated threat mitigation strategies such as blocking malicious IPs and isolating compromised devices.
e.	To Enhance Network Security Policies – Design and enforce dynamic firewall rules and access control policies to prevent unauthorized access.
f.	To Integrate Behavioral Analysis Techniques – Monitor user and network behavior to detect anomalies that may indicate cyber threats.
g.	To Implement a Security Information and Event Management (SIEM) System – Collect, analyze, and correlate security logs for centralized threat intelligence and reporting.
•  
1.4 Research Questions
a.	What are the key challenges in monitoring and detecting malicious activities in a network environment?
b.	How can machine learning techniques improve the accuracy of threat detection in network security?
c.	What are the advantages and limitations of integrating signature-based and anomaly-based intrusion detection methods?
d.	How effective is automated threat mitigation in reducing the impact of cyberattacks?
e.	What role does behavioral analysis play in identifying network anomalies and potential security threats?
f.	How can a Security Information and Event Management (SIEM) system improve real-time threat intelligence and response?
g.	What are the performance benchmarks for evaluating the effectiveness of a network protection system?
 1.5. Research hypothesis
a.	H₀ (Null Hypothesis): The integration of machine learning techniques does not significantly enhance the detection of malicious activities in network security.
H₁ (Alternative Hypothesis): The integration of machine learning techniques significantly enhances the detection of malicious activities in network security.
b.	H₀: Signature-based and anomaly-based intrusion detection systems (IDS) do not complement each other in improving network threat detection.
H₁: The combination of signature-based and anomaly-based IDS enhances network threat detection by providing more comprehensive coverage.
c.	H₀: Automated threat mitigation mechanisms do not significantly reduce the impact of cyberattacks compared to manual response methods.
H₁: Automated threat mitigation mechanisms significantly reduce the impact of cyberattacks by providing faster and more effective responses.
d.	H₀: Implementing behavioral analysis techniques does not improve the detection of network anomalies and potential security threats.
H₁: Implementing behavioral analysis techniques improves the detection of network anomalies and potential security threats.
e.	H₀: A SIEM system does not enhance real-time threat intelligence and incident response in network security.
H₁: A Security Information and Event Management (SIEM) system enhances real-time threat intelligence and incident response in network security.
f.	H₀: The proposed network protection system does not offer significant improvements in scalability and adaptability to emerging cyber threats.
H₁: The proposed network protection system significantly improves scalability and adaptability to emerging cyber threats.
g.	H₀: Dynamic firewall rules and access control policies do not contribute to enhanced network security and threat prevention.
H₁: Dynamic firewall rules and access control policies significantly enhance network security and threat prevention.
1.6 significance of the study
This study is significant as it enhances cybersecurity by designing and implementing an advanced approach to monitor malicious activities and provide robust network protection. By integrating real-time threat detection, machine learning, and automated mitigation mechanisms, the study improves the accuracy of identifying cyber threats and reduces response time. It benefits organizations by securing sensitive data, ensuring compliance with cybersecurity regulations, and minimizing the impact of cyberattacks. Additionally, the study contributes to research in network security by offering scalable and adaptable solutions to emerging threats, ultimately protecting businesses, institutions, and individual users from potential cyber risks.
1.7 Scopes
The Network Protection and Malicious Activity Monitoring System will focus on the following key areas:
•	Real-time monitoring of network traffic to identify and mitigate potential threats.
•	Deployment of intrusion detection and prevention systems (IDPS) to detect suspicious activities.
•	Integration of threat intelligence feeds to stay updated with the latest cyber threats.
1.8. Study Delimitations
While the proposed Network Protection and Malicious Activity Monitoring System aims to provide comprehensive cybersecurity solutions, it has certain limitations:
Limited Scope to Network Security: This study focuses solely on network protection and does not cover endpoint security, physical security, or insider threats extensively.
Dependency on Threat Intelligence Feeds: The effectiveness of real-time threat detection is dependent on the quality and accuracy of external threat intelligence feeds.
AI/ML Limitations: While AI/ML enhances anomaly detection, it may produce false positives and require continuous retraining to adapt to evolving threats.
Infrastructure and Resource Requirements: The implementation of real-time monitoring and automated response mechanisms requires significant computing resources and may not be feasible for small-scale organizations with limited budgets.
Exclusion of Social Engineering Attacks: The system primarily focuses on network-based threats and does not directly address phishing, impersonation, or other social engineering tactics.
Legal and Compliance Challenges: Deploying monitoring and detection mechanisms must comply with data privacy regulations, which may vary across different regions and industries.
The case study was conducted at UNIVERSITY OF KIGALI Musanze campus in Musanze District. This study was conducted there in order to analyze common malicious attacks that frequently targets the network system of that campus and propose an updated security system that will monitor all these threats and provide protection to that network system.


1.9 Research methodology
1.9.1. Q/Q or both…..  (reference)
Several methods were taken in this study to integrate qualitative and quantitative methods. qualitative methods that will be used in this study are the following: Research Design, Data Collection Methods such as interviews, documentation, Semi-structural questionnaires and observation, Sampling Strategy and Data Analysis While quantitative techniques, like surveys and data analysis, will be used to gather numerical data on variables such as waiting times and passenger satisfaction, qualitative techniques such as focus groups, interviews, and observations will be utilized to understand the viewpoints of stakeholders. Convenience and stratified sampling will be employed for selecting bus stands and survey participants, respectively. Ethical considerations will ensure informed consent and confidentiality. Acknowledgment of limitations and delimitations will define the study's boundaries and scope, allowing for systematic data collection and analysis to evaluate the effectiveness of smart monitoring systems. The preferred research methodology to be used on this study is agile methodology. (Johnson, 2007)

1.9.2. Agile Software Process Method 
In my study I chose agile as a software process method. The Agile Software Process is a collection of software development methodologies that emphasize flexibility, collaboration, rapid delivery, and continuous improvement. Agile promotes iterative cycles with constant feedback from users and stakeholders. (Rasmusson, 2001)
1.9.3. Questionnaires 
In research methodology, questionnaires are a widely used tool for collecting data, especially in quantitative research, though they can also be used in qualitative research. They are a structured form of data collection that involves asking participants a series of predefined questions to obtain information about a specific topic, behavior, or attitude. (Saunders, 2019)
1.10. Expected Results
Improved Detection of Malicious Activities
Accurate Identification of Threats:
The system should be able to correctly identify malicious activities (e.g., malware, DDoS attacks, unauthorized access attempts, phishing attacks) with high accuracy and low false positive rates.
Effective Network Protection
Automated Mitigation of Malicious Activities:
Upon detecting malicious activities, the system could automatically take actions such as quarantining affected devices, isolating compromised network segments, or blocking harmful IP addresses to prevent further damage.
Enhanced Visibility and Monitoring
Centralized Dashboard for Monitoring:The approach would likely feature a centralized monitoring dashboard where security analysts can visualize network traffic, identify potential threats, and analyze ongoing incidents. This dashboard would provide real-time insights into network health, threat status, and system vulnerabilities.
Low Overhead and Minimal Impact on Network Performance
Scalable Performance: The monitoring system should be scalable to handle varying amounts of network traffic, from small local networks to large enterprise networks, without introducing significant latency or resource overhead.

1.11 Organization of study
This research project paper was organized into five chapters:
Chapter one is the General Introduction and it includes the background of the study, problem statement, research obje ctives, research questions, research hypothesis, choice of the study, the significance of the study, limitations of the study, research methodology, and organization of the study.
Chapter two is Literature Review which will present theoretical concepts and fundamental definitions used in the research paper. The main objective is to provide useful information and explain the technology required to develop the research project.
Chapter three is Research Methodology and will describe the details of the developed project application analysis and its design. This chapter presents the study area and techniques used in the research project development. 
Chapter four is Analysis, Design, and Implementation which will present and discuss the results. In this chapter, all findings during research will be displayed here. It will show the results in the form of tables, figures, and data. 
chapter five is the Conclusion and Recommendations formulated with respect to the research objectives. There will also be references used in the project research.



















CHAPTER 2: LITERATURE REVIEW
2.1 Introduction 
This chapter includes the definition of the key concepts used in this study and explores related work in the field. It examines previous research and technology in IoT applications, particularly for systems designed to monitor the bus stand operation.
2.2 RELATED WORKS
Kabiri & Ghorbani (2020) analyzed signature-based intrusion detection systems (IDS) and found them highly effective for detecting known attacks but ineffective against zero-day exploits.Snort and Suricata, popular open-source IDS, use this approach but require frequent signature updates to remain effective. (Ghorbani, 2020)
J. Zhang et al. (2021) explored deep learning-based IDS, demonstrating that autoencoders and long short-term memory (LSTM) networks enhance anomaly detection accuracy. A challenge in anomaly detection is the high false-positive rate, leading to increased alert fatigue among security analysts. (Zhang, 2021)
R. Brown (2020) achieved 94% accuracy in detecting malicious traffic using CNN-based intrusion detection.The computational complexity of deep learning models limits their deployment in resource-constrained environments. (Brown, 2020)
K. Patel et al. (2021) deployed lightweight honeypots to collect botnet attack signatures. These honeypots are effective for basic threat intelligence but cannot capture sophisticated attack behaviors. (Patel, 2021)
M. Ali (2021) explored flow-based DDoS detection, highlighting that NetFlow analytics accurately detect volumetric attacks. However, flow-based monitoring struggles to detect stealthy, low-volume attacks. (Ali, 2021)


2.5 Research gap
Existing network security solutions, such as firewalls, intrusion detection systems (IDS), and security information and event management (SIEM) systems, often work in isolation, leading to gaps in real-time threat detection and response. Additionally, many traditional security systems rely on signature-based detection, which fails to identify new and unknown (zero-day) attacks.
Another critical gap lies in the lack of integrated, automated response mechanisms that can proactively mitigate threats without human intervention. Current solutions often detect threats but require manual intervention to neutralize them, which delays response time and increases the risk of successful cyberattacks.
This research aims to address these gaps by designing and implementing a comprehensive network security approach that integrates real-time monitoring, AI-driven anomaly detection, and automated response mechanisms. By bridging the disconnect between threat detection and mitigation, the study seeks to enhance network protection against both known and evolving cyber threats.
2.3 Definition of the key concepts
2.3.1 System Approach
A system approach is a way of solving problems or managing tasks by looking at the entire system as a whole, rather than in isolated parts. It focuses on understanding how all the components interact with each other to achieve a common goal
Network security system approach: A structured, integrated method to address network security as a whole.
2.3.2Threat detection in networking
Threat detection in networking is the process of identifying potential malicious activities or security threats within a computer network. The goal is to spot cyberattacks early, before they can do damage—like stealing data, corrupting files, or taking down systems.
2.3.3 Network protection mechanisms
Network protection mechanisms are the tools, techniques, and strategies used to defend a network from unauthorized access, misuse, and cyber threats. They're the security layers that keep your data, devices, and users safe.
2.3.4 Incident Response
Incident Response is real-time and immediate – it focuses on stopping the threat and minimizing damage.
Digital Forensics is after-the-fact – it dives deep into logs, files, and systems to reconstruct the timeline and gather evidence.

2.3.5 Computer network
A computer network is a set of computers sharing resources located on or provided by network nodes. Computers use common communication protocols over digital interconnections to communicate with each other. These interconnections are made up of telecommunications network technologies based on physically wired, optical, and wireless radio-frequency methods that may be arranged in a variety of network topologies.
2.3.6 Malicious activities in a network
Malicious activities in a network" refers to any intentional actions taken by a cybercriminal to exploit vulnerabilities within a computer network, aiming to gain unauthorized access, steal data, disrupt operations, or cause damage, including activities like malware infections, phishing attacks, denial-of-service attacks, unauthorized access attempts, and data breaches. 
2.3.7 Network threats 
A network threat refers to any potential activity or event that could harm or interrupt the systems, applications and services operating on a network. These threats can compromise the security of the network by attacking its infrastructure with the primary target usually being information theft or service disruption.
2.3.8 Cyber security
Cyber security is how individuals and organizations reduce the risk of cyber attack. Cyber security's core function is to protect the devices we all use (smartphones, laptops, tablets and computers), and the services we access - both online and at work - from theft or damage.

2.3.6 Network integrity
Network Integrity gives you insight into whether users are connecting to an evil twin or suspicious network. Attackers set up evil twin hotspots, which are Wi-Fi access points that an attacker sets up. The fake hotspot imitates a legitimate hotspot, including the primary network name of a nearby business, such as a coffee shop that provides free Wi-Fi access to its customers.
2.3.7 Virus
A computer virus is a type of malicious software, or malware, that spreads between computers and causes damage to data and software

 2.3.8 Spyware
Spyware is malicious software that enters a user's computer, gathers data from the device and user, and sends it to third parties without their consent.
2.4 Some network tools that can be used in network monitoring
a.	Intrusion Detection System (IDS) – Monitors network traffic for suspicious activities and generates alerts when potential threats are detected. Examples: Snort, Suricata.
b.	Intrusion Prevention System (IPS) – Similar to IDS, but with the capability to actively block or mitigate detected threats in real-time. Examples: Zeek (formerly Bro), Cisco Firepower.
c.	Firewall – A security system that filters incoming and outgoing network traffic based on predefined rules, preventing unauthorized access. Examples: pfSense, iptables, Cisco ASA.
d.	Security Information and Event Management (SIEM) System – Collects, analyzes, and correlates security event logs from various sources to provide real-time threat intelligence and incident response. Examples: Splunk, ELK Stack (Elasticsearch, Logstash, Kibana), IBM QRadar.
e.	Packet Sniffers and Network Analyzers – Capture and analyze network traffic to detect anomalies and security vulnerabilities. Examples: Wireshark, tcpdump.
f.	Vulnerability Scanners – Identify security weaknesses in systems and networks by scanning for known vulnerabilities. Examples: Nessus, OpenVAS, Qualys.
g.	Endpoint Detection and Response (EDR) Tools – Monitor endpoint devices (computers, servers, mobile devices) for malicious activities and provide incident response capabilities. Examples: CrowdStrike Falcon, Microsoft Defender for Endpoint.
h.	Honeypots – Decoy systems designed to attract and analyze attackers' behavior without putting real systems at risk. Examples: Cowrie, Dionaea.

2.5 Hardware and software tools that will be used in development of this system
2.5.1 hardware requirements
•	Multi-core processors (Intel i7/i9, AMD Ryzen 7/9, or higher)
•	Minimum 16GB RAM (32GB recommended for deep learning-based detection)
•	SSD with at least 500GB storage for logs and historical data
•	High-speed network adapters (1Gbps or higher)
2.5.2 Software requirements
•	Windows 10 operating system
•	IDS/IPS tools (Snort, Suricata, Zeek)
•	Database management systems (PostgreSQL, Elasticsearch, MongoDB)

2.5.3 Network and Security Requirements
•	TLS/SSL encryption for secure communication
•	Role-Based Access Control (RBAC)
Real-time log collection with SIEM integration

CHAPTER 3: METHODOLOGY AND MATERIALS

3.1 Introduction

This chapter details the research methodology employed in the development and evaluation of the proposed Network Protection and Malicious Activity Monitoring System. It outlines the methods for data collection, the techniques utilized for data analysis, and the system architecture, including functional and non-functional requirements. The materials and tools necessary for the project's realization are also discussed, providing a comprehensive overview of the approach taken to address the research objectives.

3.2 Case Study Context: University Network Environment

The conceptual framework for this research is informed by the cybersecurity needs of academic institutions, such as the University of Kigali, Musanze campus. University networks are typically large, diverse, and dynamic, presenting a multitude of security challenges including exposure to common malware, phishing attempts, unauthorized access, and other cyber threats. The system proposed in this research is designed to be applicable in such environments, providing a robust solution for monitoring network traffic, detecting malicious activities, and enabling timely responses to protect institutional data and IT infrastructure. While not exclusively developed for this specific campus, its characteristics represent a typical use-case scenario for the deployment and potential evaluation of the system.

3.3 Data Collection

The data collection strategy for this research focuses on gathering relevant information from the network environment to enable threat detection and analysis. The primary types of data collected include:

*   Network Traffic Data: Full packet capture or metadata (e.g., NetFlow-like summaries) is essential. This data provides deep visibility into network communications, protocols used, connection patterns, and payload snippets where appropriate and permissible. The system's packet sniffing component (`backend/packet_sniffer_service.py`) is responsible for this.
*   System Logs: Logs from various network devices (firewalls, routers, servers) and endpoints can provide contextual information. For this project, the system itself generates detailed operational and security logs (`backend/logs/`, `backend/app/models/log.py`).
*   Threat Intelligence Feeds: External threat intelligence sources (e.g., lists of known malicious IPs, malware signatures) are crucial for identifying known threats. The system is designed to cache and utilize such feeds (`backend/threat_feeds_cache.json`, `backend/api/threat_intel_api.py`).

Techniques for data collection are:

*   3.3.1 Packet Sniffing: Live network traffic is captured using a dedicated service (`backend/packet_sniffer_service.py`, `backend/sniff.py`). This allows for real-time analysis of packet headers and, where configured, payloads.
*   3.3.2 Log Aggregation and Management: The system centralizes logs generated by its own components and is designed with the capability to ingest logs from other sources if integrated. These logs are structured and stored for analysis and auditing (`backend/app/services/logging/`).
*   3.3.3 Threat Intelligence Ingestion: The system periodically fetches and updates local caches of threat intelligence data.

3.4 Data Analysis

Collected data is processed and analyzed to detect malicious activities and identify security threats. The primary analysis techniques include:

*   3.4.1 Rule-Based Detection: The system employs a set of predefined rules and signatures (`backend/rules.json`) to identify known attack patterns, malware signatures, and policy violations. This is effective for detecting well-understood threats.
*   3.4.2 Statistical Analysis and Anomaly Detection: Network traffic is analyzed for deviations from established baselines or normal behavior. This includes detecting unusual traffic volumes, port scanning activities, or unexpected communication patterns (`backend/app/services/detection/`).
*   3.4.3 Machine Learning-Based Analysis: Machine learning models (`backend/ml/models/`) are utilized for more sophisticated threat analysis. This includes:
    *   Traffic Classification: Identifying types of network traffic or protocols that may be used maliciously.
    *   Anomaly Detection: Identifying subtle deviations from normal patterns that may indicate novel or zero-day threats (`eCyber_anomaly_isolation` model).
    *   The process involves feature extraction (`backend/ml/feature_extraction.py`) from network data and training models (`backend/ml/train.py`) to recognize malicious characteristics.
*   3.4.4 Alert Correlation: The system aims to correlate alerts from different detection mechanisms to reduce false positives and provide a more comprehensive view of security incidents.

3.5 System Requirements

To effectively implement the Network Protection and Malicious Activity Monitoring System, the following requirements are considered:

*   3.5.1 Hardware Requirements (Illustrative):
    *   Server(s) with multi-core processors (e.g., Intel Xeon, AMD EPYC).
    *   Sufficient RAM (e.g., 16GB or more, depending on network load and ML model complexity, 32GB+ recommended for intensive ML).
    *   Fast storage (SSD/NVMe recommended) for logs, packet captures, and databases (e.g., 500GB+).
    *   Multiple high-speed network interfaces for traffic capture and management.
*   3.5.2 Software Requirements:
    *   Operating System: Linux (recommended for backend server components), Windows/macOS/Linux for client-side access to the web interface.
    *   Backend Technologies: Python (FastAPI framework), database system (e.g., PostgreSQL or SQLite as per `backend/security.db`), appropriate libraries for packet sniffing (e.g., Scapy, libpcap wrappers), machine learning libraries (e.g., Scikit-learn, TensorFlow/PyTorch). (Reflected in `backend/requirements.txt`).
    *   Frontend Technologies: JavaScript/TypeScript (React framework), web server for hosting. (Reflected in `eCyber/package.json`).
    *   Supporting Tools: Version control (Git), potentially containerization (Docker).
*   3.5.3 Network and Security Infrastructure Requirements:
    *   Access to network traffic (e.g., via a SPAN port or network TAP).
    *   Secure communication channels (TLS/SSL) for web interface access and API communication.
    *   Appropriate firewall rules to allow legitimate system communications.

3.6 Functional Requirements

The system is designed to meet the following functional requirements:

*   3.6.1 Real-time Threat Detection:
    *   Continuously monitor network traffic in real-time.
    *   Detect known threats using signature-based detection (`backend/rules.json`).
    *   Identify suspicious activities and potential unknown threats using anomaly detection algorithms and machine learning models (`backend/app/services/detection/`, `backend/ml/`).
    *   Log all detected threats and security events (`backend/app/models/log.py`).
*   3.6.2 Intrusion Prevention System (IPS) Capabilities:
    *   Automatically block traffic from known malicious IP addresses or based on severe threat detection (`backend/app/api/ips.py`, `backend/app/middleware/blocker_middleware.py`).
    *   Allow administrators to define and manage blocking policies, potentially through firewall integration (`backend/app/api/firewall_api.py`).
*   3.6.3 Machine Learning-Based Analysis:
    *   Train machine learning models on network data to identify complex patterns and anomalies (`backend/ml/train.py`).
    *   Utilize trained models for real-time traffic analysis and threat scoring (`backend/api/ml_models_api.py`, `backend/app/services/threat_analysis_service.py`).
    *   Provide mechanisms for updating and retraining models as new data becomes available.
*   3.6.4 Log Management and Reporting:
    *   Collect and securely store security logs from system components.
    *   Provide a user interface (`eCyber/src/pages/Logs.tsx`) for viewing, searching, and filtering logs.
    *   Generate reports and visualizations of security events and network status through a dashboard (`eCyber/src/components/dashboard/`).
*   3.6.5 User Access Control and Authentication:
    *   Implement secure user authentication for accessing the system's management interface (`backend/app/api/auth.py`).
    *   Support multi-factor authentication (MFA) for enhanced security (`eCyber/src/components/TwoFactorAuthSettings.tsx`).
    *   Enforce role-based access control (RBAC) to restrict system functionalities based on user roles (e.g., administrator, analyst) (inferred from `backend/app/api/admin.py`, `users.py`).

3.7 Non-Functional Requirements

The system aims to achieve the following non-functional qualities:

*   3.7.1 Performance:
    *   Ensure low latency in threat detection and alert generation.
    *   Support high network throughput for traffic analysis without significant performance degradation to the monitored network. The backend (`FastAPI`) and asynchronous operations contribute to this.
*   3.7.2 Scalability:
    *   The system should be designed to handle increasing network traffic and data volumes. This is supported by a modular architecture and API-driven design.
    *   Support distributed deployment of components where feasible (e.g., separate packet sniffers reporting to a central analysis server).
*   3.7.3 Reliability:
    *   Ensure high availability of the monitoring and detection capabilities. (While full fault tolerance with automated failover is a more advanced goal, the system should be robust against common failures).
*   3.7.4 Security (of the system itself):
    *   Adhere to secure coding practices.
    *   Protect sensitive data (logs, configuration, user credentials) using encryption and access controls (`backend/app/core/security.py`).
    *   Secure all API endpoints and web interfaces.
*   3.7.5 Usability:
    *   Provide an intuitive and user-friendly web interface (`eCyber/`) for administrators and security analysts.
    *   Offer clear visualizations, dashboards, and actionable alerts (`eCyber/src/alert/`, `eCyber/src/components/dashboard/`).
    *   Facilitate easy configuration and management of the system.

3.8 System Development Methodology

*   3.8.1 Agile Model:
    The development of this system follows an Agile methodology. Agile emphasizes iterative development, flexibility, collaboration, and continuous improvement. The project is broken down into smaller, manageable iterations (sprints), each resulting in a potentially shippable increment of the software. This approach allows for regular feedback, adaptation to changing requirements, and faster delivery of functional components.
*   3.8.2 Planning Phase:
    This initial phase involves defining the project scope, high-level objectives, and preliminary requirements. Work is estimated, and a product backlog is created, outlining features and tasks for subsequent iterations.
*   3.8.3 Requirements Analysis Stage:
    In each iteration, specific requirements for the network security system's functionalities are analyzed and refined. This involves understanding the types of threats to be detected, the data needed for analysis, and the interactions required with users (security analysts). Use cases and user stories may be developed to clarify these requirements.
*   3.8.4 System Design Phase:
    Based on the analyzed requirements, design activities focus on the system architecture, data models (e.g., for logs, threats, network packets), API specifications, and user interface mockups. This includes designing the packet sniffing pipeline, threat detection logic, ML model integration, and database schema.
*   3.8.5 Implementation Phase:
    This phase involves the actual coding and development of the system components based on the design specifications. This includes writing backend code for data processing and APIs (`backend/`), developing frontend components for the user interface (`eCyber/`), and integrating various modules.
*   3.8.6 Testing Phase:
    Throughout the development lifecycle, various testing activities are conducted:
    *   Unit tests for individual modules and functions.
    *   Integration tests to verify interactions between components.
    *   System testing to ensure the entire system functions as expected.
    *   Performance testing to evaluate the system's behavior under load.
    *   Security testing to identify and address vulnerabilities in the system itself.
    (Evidence of testing infrastructure: `backend/tests/`).
*   3.8.7 Maintenance Phase:
    After deployment, the system enters a maintenance phase. This involves ongoing monitoring of its performance, fixing any discovered bugs, applying security patches, and potentially developing enhancements or new features based on user feedback and the evolving threat landscape.

CHAPTER 4: ANALYSIS, DESIGN, AND IMPLEMENTATION

4.1 Introduction

This chapter provides a detailed account of the analysis, design, and implementation of the Network Protection and Malicious Activity Monitoring System. It elaborates on the architectural design, the core components, and the technologies employed to achieve the research objectives outlined in Chapter 1. The chapter will describe how the system's modules for real-time threat detection, intrusion prevention, machine learning-based analysis, log management, and user interaction are realized. Furthermore, it discusses how the implemented system addresses the functional and non-functional requirements stipulated in Chapter 3 and explains the mechanisms through which research findings and system performance are demonstrated.

4.2 System Architecture

The system is designed with a modular, multi-tier architecture consisting primarily of a backend application (`backend/`) responsible for data collection, processing, analysis, and API services, and a frontend web application (`eCyber/`) providing user interface, visualization, and interaction capabilities.

*   4.2.1 Backend Architecture (`backend/`)
    *   Data Ingestion Layer:
        *   The `packet_sniffer_service.py` module is responsible for capturing raw network traffic from a designated network interface. It utilizes packet capture libraries (e.g., Scapy, or direct libpcap bindings) to collect packet data.
        *   Log ingestion capabilities are designed to allow future integration of logs from external sources (e.g., syslog, other security devices), though the primary focus is on logs generated by the system itself (`backend/app/services/logging/`).
    *   Processing and Detection Core:
        *   Captured packets are passed to a series of analysis services.
        *   Rule-based detection is performed using a predefined set of signatures stored in `backend/rules.json`.
        *   Heuristic and statistical analysis modules reside in `backend/app/services/detection/` (e.g., `brute_force_detector.py`, `port_scan_detector.py`) to identify suspicious patterns.
        *   The Machine Learning (ML) core (`backend/ml/`) preprocesses data using `feature_extraction.py`, and applies trained models from `backend/ml/models/` (e.g., `eCyber_anomaly_isolation`, `eCyber_classifier_models`) for anomaly detection and traffic classification via `backend/app/services/threat_analysis_service.py`.
    *   Data Storage:
        *   A relational database (SQLite, as indicated by `backend/security.db`) is used for storing structured data such as user credentials, system configurations, threat information (`backend/app/models/threat.py`), IPS rules (`backend/app/models/ips.py`), and processed log events (`backend/app/models/log.py`). SQLAlchemy is used as the ORM.
        *   Raw log files are stored in `backend/logs/`.
        *   Threat intelligence data is cached in `backend/threat_feeds_cache.json`.
    *   API Layer:
        *   A RESTful API, built using the FastAPI framework, exposes functionalities to the frontend and potentially other third-party systems. Key API modules include:
            *   `backend/app/api/auth.py`: User authentication and authorization.
            *   `backend/app/api/ids.py`, `backend/app/api/ips.py`, `backend/app/api/firewall_api.py`: Managing IDS/IPS rules and firewall interactions.
            *   `backend/app/api/ml_models_api.py`: Interacting with ML models.
            *   `backend/app/api/network.py`, `backend/app/api/threats.py`, `backend/app/api/logs.py`: Providing data for frontend display.
    *   Real-time Communication: WebSocket services (`backend/socket_events.py`, `backend/malware_events_namespace.py` using Socket.IO via `sio_instance.py`) are used to push real-time alerts and system status updates to the frontend.

*   4.2.2 Frontend Architecture (`eCyber/`)
    *   User Interface (UI): Developed using React (TypeScript) framework (`eCyber/src/App.tsx`). It provides a comprehensive web-based interface for system interaction.
    *   Component-Based Structure: The UI is built from reusable components located in `eCyber/src/components/` for various functions like dashboards, logs, settings, alerts, etc.
    *   State Management: Client-side state management (e.g., Redux Toolkit in `eCyber/src/app/store.ts` or React Context API in `eCyber/src/context/AuthContext.tsx`) is used to manage application data and UI state.
    *   API Interaction: The frontend communicates with the backend via HTTP requests to the FastAPI endpoints using a client like `axios` (configured in `eCyber/src/lib/apiClient.ts`).
    *   Real-time Updates: WebSocket clients (`eCyber/src/hooks/useSocket.ts`, `usePacketSnifferSocket.ts`) connect to the backend to receive and display live data such as alerts and traffic information.
    *   Visualization: Libraries (e.g., Chart.js, or custom SVG components) are used to render charts, graphs, and other visualizations for dashboards and reports.

*   4.2.3 Interaction Flow Example (Threat Detection and Alerting):
    1.  `packet_sniffer_service.py` captures a packet.
    2.  The packet is passed through rule-based, heuristic, and ML analysis services.
    3.  If a threat is detected, an event is generated and logged (e.g., in `security.db` via `backend/app/models/threat.py`).
    4.  The `malware_events_namespace.py` (or similar WebSocket service) is notified.
    5.  The WebSocket service pushes an alert to connected `eCyber/` clients.
    6.  The `eCyber/` frontend (e.g., `eCyber/src/alert/Alerts.tsx`) displays the real-time alert to the user.
    7.  The user can then investigate further via the dashboard (`eCyber/src/pages/Dashboard.tsx`) or log viewer (`eCyber/src/pages/Logs.tsx`).

4.3 Design and Implementation of Key Features

*   4.3.1 Real-time Threat Detection:
    *   Design: A multi-layered detection approach is used:
        *   Signature-based detection for known threats using rules in `backend/rules.json`.
        *   Heuristic analysis for common attack patterns (e.g., port scanning, brute-force attempts) implemented in `backend/app/services/detection/`.
        *   ML-based anomaly detection for novel threats using models in `backend/ml/models/`.
    *   Implementation: The `packet_sniffer_service.py` acts as the primary data source. It feeds data into a processing pipeline where various detection modules analyze it concurrently or sequentially. Detected events are standardized and logged. Real-time alerts are pushed to the `eCyber/` frontend using WebSockets.

*   4.3.2 Intrusion Prevention System (IPS) Capabilities:
    *   Design: The IPS is designed to take action based on detected threats, primarily by blocking malicious IP addresses. It integrates with firewall management capabilities.
    *   Implementation:
        *   The `backend/app/api/ips.py` provides endpoints for managing IPS rules (e.g., adding/removing blocked IPs).
        *   The `backend/app/middleware/blocker_middleware.py` could serve as an application-level blocker or interface with a list of blocked IPs.
        *   Integration with external firewalls is managed via `backend/app/api/firewall_api.py`, allowing the system to dynamically update firewall rules (e.g., adding an IP to a blocklist on a pfSense or iptables firewall, though specific adapter code for each firewall type would be extensive).
        *   The `eCyber/` frontend (e.g., `eCyber/src/components/settings/FirewallSettings.tsx`) would allow administrators to view and manage these settings.

*   4.3.3 Machine Learning Integration for Threat Analysis:
    *   Design: ML models are used for advanced threat analysis, focusing on anomaly detection and potentially traffic classification. The workflow includes data preprocessing, feature extraction, model training (offline or periodically), and real-time prediction.
    *   Implementation:
        *   `backend/ml/feature_extraction.py`: Extracts relevant features from network data (e.g., packet sizes, timings, protocol flags).
        *   `backend/ml/train.py`: Script for training models (e.g., `eCyber_anomaly_isolation` using algorithms like Isolation Forest, or classifiers like Random Forest stored in `eCyber_classifier_models`).
        *   `backend/api/ml_models_api.py`: Provides an interface for the analysis engine to send data to models and receive predictions.
        *   `backend/app/services/threat_analysis_service.py`: Orchestrates the use of ML predictions in the overall threat assessment.
        *   The `eCyber/src/pages/Models.tsx` page in the frontend might display information about loaded models, their status, or basic performance metrics.

*   4.3.4 Log Management and Reporting:
    *   Design: Centralized logging for audit trails, incident investigation, and report generation. Logs are structured and stored for efficient querying.
    *   Implementation:
        *   `backend/app/models/log.py` defines the schema for log entries stored in the database.
        *   `backend/app/services/logging/` handles the creation and storage of log entries. Raw logs may also be written to `backend/logs/`.
        *   The `eCyber/src/pages/Logs.tsx` provides a UI for users to view, filter, and search through logs.
        *   The `eCyber/src/components/dashboard/` contains various widgets that query and visualize log data and threat events to provide summary reports and trends.
        *   `backend/app/utils/report.py` suggests functionality for generating more formal reports, potentially in formats like PDF or CSV, though the UI dashboard is the primary reporting interface.

*   4.3.5 User Interface (UI) and Dashboard (`eCyber/`):
    *   Design: The UI is designed to be intuitive, providing security analysts with a clear overview of the network's security posture, real-time alerts, and tools for investigation.
    *   Implementation:
        *   `eCyber/src/pages/Dashboard.tsx`: Presents a central overview with key metrics, active alerts, threat trends, and visualizations of network activity. This page would aggregate data from various backend APIs.
        *   `eCyber/src/components/live-system/`: Components dedicated to showing real-time data feeds, such as ongoing connections or packet rates.
        *   `eCyber/src/alert/Alerts.tsx`: Manages the display of incoming real-time alerts, possibly with severity indicators and quick actions. Desktop notifications are handled via `eCyber/electron/`.
        *   `eCyber/src/pages/Threats.tsx`: Allows for detailed exploration of detected threats, filtering, and viewing threat history.
        *   `eCyber/src/pages/Network.tsx`: Provides visualizations of network traffic patterns, protocol distributions, etc.
        *   Settings pages (e.g., `eCyber/src/pages/Settings.tsx`, potentially including user management, IPS/firewall rules, model management interfaces) allow administrators to configure the system.

4.4 Addressing Requirements

*   4.4.1 Functional Requirements (from Chapter 3.6):
    *   Real-time Threat Detection: Achieved through the packet sniffing service, rule engine, heuristic detectors, and ML models, with results logged and alerted in real-time as described in 4.3.1.
    *   IPS Capabilities: Implemented via IP blocking mechanisms and firewall integration API (4.3.2), allowing automated and manual responses.
    *   ML-Based Analysis: Integrated as per 4.3.3, with capabilities for training and utilizing models for advanced threat detection.
    *   Log Management and Reporting: Addressed by the centralized logging system and the frontend's log viewer and dashboard (4.3.4).
    *   User Access Control and Authentication: Secure authentication with MFA and RBAC is implemented via `backend/app/api/auth.py` and related frontend components.

*   4.4.2 Non-Functional Requirements (from Chapter 3.7):
    *   Performance: The use of FastAPI (asynchronous) in the backend, efficient packet capture techniques, and optimized database queries aim to achieve low latency. Real-time UI updates are facilitated by WebSockets. (Actual performance metrics would be presented as "findings").
    *   Scalability: The modular architecture with a separate frontend and backend, and API-driven communication, allows for scaling components independently. The backend services are designed to handle significant data loads. (Further scalability can be achieved by deploying multiple backend instances or specialized sniffers).
    *   Reliability: While full fault tolerance is complex, the system aims for robustness through error handling in code, and the database provides data persistence. Critical alerts are prioritized.
    *   Security (of the system): Secure coding practices, use of HTTPS/TLS for communication, password hashing (`backend/app/core/security.py`), and RBAC contribute to system security.
    *   Usability: The `eCyber/` frontend is designed with a focus on providing a clear, intuitive interface with actionable insights through dashboards and alerts.

4.5 Presentation of Findings and Results

The system is designed to present findings from its research and operational activity in several ways, aligning with the expectation from Chapter 1 that Chapter 4 will "present and discuss the results... in the form of tables, figures, and data":

*   Real-time Alerts: Immediate notifications of detected threats are provided through the `eCyber/` UI (desktop notifications and in-app alerts), including severity and basic details. This is a primary "finding."
*   Dashboard Visualizations: The `eCyber/src/pages/Dashboard.tsx` serves as the main hub for presenting findings. This includes:
    *   Tables: Lists of active threats, recent security events, top affected assets.
    *   Figures: Graphs showing threat trends over time, pie charts of threat types or severities, network traffic volume charts, potentially geographical maps of attack origins (if `backend/app/utils/geo_utils.py` is fully integrated with UI).
    *   Data: Key metrics such as total threats detected, number of IPs blocked, number of active high-priority alerts.
*   Log Viewer: The `eCyber/src/pages/Logs.tsx` allows for detailed inspection of raw and processed log data, enabling analysts to drill down into specific events, which forms a basis for detailed findings.
*   Threat Management Interface: `eCyber/src/pages/Threats.tsx` allows users to review historical threats, filter by various criteria (e.g., date, severity, type), and understand the scope of past incidents.
*   Reporting Module: The `backend/app/utils/report.py` can be extended to generate downloadable reports (e.g., PDF, CSV) summarizing security posture, incident details, or compliance metrics, which are tangible research outputs.
*   ML Model Performance: While detailed model training results (accuracy, precision, recall, F1-scores, confusion matrices from `backend/ml/train.py`) are typically documented in a research context (and would be presented in this chapter of the paper), the UI (`eCyber/src/pages/Models.tsx`) might provide summaries or status of deployed models.

The results generated by these mechanisms provide evidence of the system's effectiveness in detecting and responding to threats, and its overall performance, which are key findings of this research. Evaluation against specific datasets or in controlled environments would yield quantitative results suitable for inclusion in this chapter.

CHAPTER 5: CONCLUSION AND RECOMMENDATIONS
[Chapter 5 content to be added. This chapter will summarize the findings of the research, reiterate how the objectives were met, discuss the limitations of the study, and propose recommendations for future work as outlined in analysis_chapter5_vs_codebase.txt.]

Bibliography
Ali, M. (2021). DDoS detection using NetFlow analytics. chicago: NYC publisher.
Brown, R. (2020). A Convolutional Neural Network Intrusion Detection Method Based on Data Imbalance. CNN, 30-38.
Ghorbani, A. A. (2020). Network Intrusion Detection and Prevention:. brunswick: Canadian Institute for Cybersecurity.
Jiang, X. (2010). Malware Analysis and Detection Engineering. shangai: network adventures work press.
Patel, K. (2021). Honeypot-Aware Advanced Botnet Construction and Maintenance. texas: IET research.
Wrightson, C. E. (2012). Malware Analysis and Detection Engineering. chicago: network adventure works press.
Xiang, J. (2015). Detecting and Understanding Malware Using Machine Learning and Data Analytics. shangai: shangai book publishers.
Zhang, J. (2021). Anomaly Detection in Surveillance Scenes Using Autoencoders. london: Springer Nature portfolio.

[end of docs/isimbi.txt]

[start of analysis_chapter5_vs_codebase.txt]
## Analysis of Expected Chapter 5 Content vs. Codebase Structure

**Chapter 5 ("Conclusion and Recommendations") is currently missing from `docs/isimbi.txt`.** The following analysis outlines what Chapter 5 should contain, based on the project's objectives (Chapter 1), the implemented system (`backend/`, `eCyber/`), and the analyses of previous/expected chapters.

**1. Chapter 5 Status: Missing/Placeholder**

Chapter 5 needs to be written from scratch.

**2. Key Conclusions for Chapter 5 (to be written):**

Conclusions should directly address the project's objectives (Chapter 1.3) and reflect the system's achievements as evidenced by the codebase and the (yet to be written but outlined) findings in Chapter 4.

*   **Overall Achievement:** The research successfully designed and implemented a functional prototype of an integrated network security system for monitoring malicious activities and providing protection. This system comprises a backend for data processing and APIs (`backend/`) and a frontend for user interaction and visualization (`eCyber/`).
*   **Fulfillment of Specific Objectives:**
    *   **Threat Monitoring System (1.3.2.a):** A framework for continuous real-time network traffic monitoring and malicious activity detection was developed (`backend/packet_sniffer_service.py`, `backend/app/services/detection/`, `eCyber/` live views).
    *   **Integrated IDS Mechanisms (1.3.2.b):** The system incorporates both signature-based (`backend/rules.json`) and anomaly-based (`backend/ml/models/eCyber_anomaly_isolation/`) intrusion detection, offering broader threat coverage.
    *   **Machine Learning for Threat Analysis (1.3.2.c):** ML techniques (`backend/ml/`) were successfully applied to analyze network patterns and identify potential unknown threats, enhancing detection capabilities.
    *   **Automated Response Mechanisms (1.3.2.d):** The system implements automated responses, notably the blocking of malicious IPs via its IPS and firewall control features (`backend/app/api/ips.py`, `backend/app/api/firewall_api.py`). (The extent of "device isolation" needs careful wording based on actual implementation detailed in Ch 4).
    *   **Enhanced Network Security Policies (1.3.2.e):** Dynamic firewall rule management and role-based access control are supported, allowing for adaptable security policy enforcement.
    *   **Behavioral Analysis Techniques (1.3.2.f):** Network behavior analysis is integrated, primarily through ML-driven anomaly detection, to identify deviations indicative of threats.
    *   **SIEM-like Functionality (1.3.2.g):** The system provides core SIEM capabilities by collecting, analyzing, and correlating security logs, with centralized reporting via the `eCyber/` dashboard.
*   **Synthesis of Findings (from the future Chapter 4):** Chapter 5 should summarize the key quantitative and qualitative results presented in Chapter 4, such as the effectiveness of threat detection, the performance of ML models, and the system's responsiveness.
*   **Contribution:** The research contributes a practical design and implementation of a multi-faceted network security system, demonstrating the value of integrating various detection and response techniques.

**3. Recommendations for Future Work (to be written):**

These should be based on project delimitations (Chapter 1.8), identified gaps, and potential system enhancements.

*   **Addressing Study Delimitations:**
    *   **Endpoint Security Integration:** Develop EDR agent integration for host-level data.
    *   **Social Engineering Attack Defense:** Incorporate email security features or user awareness tools.
    *   **Advanced Insider Threat Detection:** Enhance user behavioral analytics.
*   **System Enhancements (`backend/` & `eCyber/`):**
    *   **Advanced ML Models:** Explore deep learning, online learning, and GNNs.
    *   **SOAR Capabilities:** Implement broader security orchestration, automation, and response features beyond IP blocking (e.g., host isolation via EDR, user account actions).
    *   **Scalability & Reliability:** Rigorous performance optimization, explore distributed processing, and implement robust database/backend failover.
    *   **Cloud-Native Adaptation:** Package for cloud deployment (Docker/Kubernetes) and integrate with cloud security services.
    *   **Enhanced Threat Intelligence:** Support more TI formats (STIX/TAXII) and improve correlation.
    *   **Compliance Reporting:** Add templates for common security compliance frameworks.
    *   **UX Enhancements:** Conduct usability studies for `eCyber/` and improve dashboard/alert customization.
    *   **Expanded Test Coverage:** Increase unit, integration, and end-to-end testing.
*   **Research-Oriented Recommendations:**
    *   Investigate the effectiveness of specific ML algorithms for particular network attack types.
    *   Conduct a comparative study of this system against other open-source or commercial IDS/SIEM tools.
    *   Explore the ethical implications and potential biases in ML-based threat detection.
*   **Documentation Consistency (Meta-Recommendation):**
    *   Ensure the final paper (Chapters 1, 3, 4, 5) is entirely consistent, focusing only on the implemented network security project and removing any unrelated themes (e.g., "smart bus stand").

**4. Adjustments if Chapter 5 Existed:**

*   This section is not applicable as Chapter 5 is currently missing. Any new content for Chapter 5 must be written to be consistent with the actual system and the revised/developed content of Chapters 3 and 4.

This structure provides a comprehensive guide for developing Chapter 5, ensuring it accurately reflects the project's outcomes and offers meaningful directions for future development and research.

[end of analysis_chapter5_vs_codebase.txt]
